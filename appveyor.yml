image: Visual Studio 2015
clone_folder: c:\projects\worktree\libalmath
configuration: Release

# variable definitions
# variables will be accessible as %myvar% from batch,
# and as $env:myvar from powershell
# Here some doc:
# - https://kevinmarquette.github.io/2017-01-13-powershell-variable-substitution-in-strings
# - https://msdn.microsoft.com/powershell/reference/5.1/Microsoft.PowerShell.Core/about/about_Functions
environment:
  maya_libs_archive_path: '%APPVEYOR_BUILD_FOLDER%\mayasdk\maya2017-libs-win64.zip'
  maya_headers_archive_path: '%APPVEYOR_BUILD_FOLDER%\mayasdk\maya2017-headers-win64.zip'
  # "local mirror" when the packages are available using git and/or git-lfs
  qitoolchain_pkgs_url: 'file:///%APPVEYOR_BUILD_FOLDER%/toolchains/packages'
  boost_qitoolchain_pkg_relpath: win64-vs2015/boost-win64-vs2015-1.64.0-r7.zip
  eigen3_qitoolchain_pkg_relpath: any/eigen3-3.2.4-r1.zip
  pthread_qitoolchain_pkg_relpath: win64-vs2015/pthread-win64-vs2015-2.8.0-r3.zip
  vcredist_qitoolchain_pkg_relpath: win64-vs2015/vcredist-win64-vs2015-14.0-r2.zip
  MAYA_LOCATION: C:\Users\appveyor\Maya2017

install:
# extract the Maya libs in MAYA_LOCATION
# extract the C++ headers in MAYA_LOCATION\include, as recommanded in
# http://help.autodesk.com/view/MAYAUL/2017/ENU/?guid=__files_Setting_up_your_build_env_Windows_env_32bit_and_64bit_htm
- ps: |
    $dir = Split-Path -Path $env:MAYA_LOCATION
    Push-Location $dir
    & 7z x $env:maya_libs_archive_path
    & 7z x $env:maya_headers_archive_path
    Pop-Location
    if (-Not (Test-Path $env:MAYA_LOCATION)) {
        throw "failed to prepare MAYA_LOCATION"
    }

before_build:
# cfr https://www.appveyor.com/docs/lang/cpp/
- call "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64
- call "C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat" x86_amd64
- set PATH=C:\Python27\scripts;%PATH%
- git clone -q --depth 1 https://github.com/aldebaran/qibuild.git --branch master
- pip install ./qibuild
# create and populate the toolchain
- ps: |
    $tc = "master-host"
    function AddPackage ($relpath, $name="") {
        $prefix = "${env:qitoolchain_pkgs_url}"
        if ($name) {
          & qitoolchain  add-package -t $tc "${prefix}/${relpath}" --name $name
        } else {
          & qitoolchain  add-package -t $tc "${prefix}/${relpath}"
        }
    }
    & qitoolchain create $tc
    # eigen3 is in the "old package format" so a name is required
    AddPackage -relpath $env:eigen3_qitoolchain_pkg_relpath -name eigen3
    AddPackage -relpath $env:boost_qitoolchain_pkg_relpath
    AddPackage -relpath $env:pthread_qitoolchain_pkg_relpath
    AddPackage -relpath $env:vcredist_qitoolchain_pkg_relpath
    & qitoolchain info $tc
    & qibuild add-config host -t $tc
# setup a worktree
# we create worktree.xml, just like qisrc init would have done
#
# I failed to create xml content with batch echo, because of weird escaping
# of angle brackets, so I resorted to powershell
- ps: |
    Push-Location c:\projects\worktree
    & git clone -q https://github.com/aldebaran/gtest.git
    & qibuild init
    Set-Content -Value '<worktree><project src="gtest"/><project src="libalmath"/></worktree>' -Path .qi\worktree.xml
    Pop-Location
# configure!
- qibuild configure -c host -G "Visual Studio 14 2015 Win64" --release -DALMATH_WITH_QIGEOMETRY=OFF -DALMATH_WITH_MAYAPLUGIN=ON -DWITH_PYTHON=OFF -DALMATH_AS_STATIC_LIBRARY=ON -DMAYA_INCLUDE_DIRS="%MAYA_LOCATION%/include" -DMAYA_INSTALL_BASE_PATH="C:\Users\appveyor"

build_script:
- qibuild make -c host

test_script:
# skip the mayaplugin test, because it crashes
# TODO: understand why
- qitest run -c host -k .*almath.*
#- qitest run -c host

artifacts:
- path: '**\*.mll'
